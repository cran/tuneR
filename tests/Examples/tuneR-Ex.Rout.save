
R Under development (unstable) (2023-11-08 r85496 ucrt) -- "Unsuffered Consequences"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tuneR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('tuneR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MCnames")
> ### * MCnames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MCnames
> ### Title: Default channel ordering for multi channel wave files
> ### Aliases: MCnames
> ### Keywords: datasets
> 
> ### ** Examples
> 
> MCnames # the 18 predefined channels in a multi channel Wave file (WaveMC object)
   id                 label name
1   1            Front Left   FL
2   2           Front Right   FR
3   3          Front Center   FC
4   4         Low Frequency   LF
5   5             Back Left   BL
6   6            Back Right   BR
7   7  Front Left of Center  FLC
8   8 Front Right of Center  FRC
9   9           Back Center   BC
10 10             Side Left   SL
11 11            Side Right   SR
12 12            Top Center   TC
13 13        Top Front Left  TFL
14 14      Top Front Center  TFC
15 15       Top Front Right  TFR
16 16         Top Back Left  TBL
17 17       Top Back Center  TBC
18 18        Top Back Right  TBR
> 
> 
> 
> cleanEx()
> nameEx("MonoStereo")
> ### * MonoStereo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mono-Stereo
> ### Title: Converting (extracting, joining) stereo to mono and vice versa
> ### Aliases: mono stereo
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> Wobj <- sine(440)
> Wobj

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> Wobj2 <- stereo(Wobj, Wobj)
> Wobj2

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Stereo
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> mono(Wobj2, "right")

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> 
> 
> 
> cleanEx()
> nameEx("Wave")
> ### * Wave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wave
> ### Title: Constructors and coercion for class Wave objects
> ### Aliases: Wave Wave,ANY-method Wave,WaveMC-method Wave,numeric-method
> ###   Wave,matrix-method Wave,data.frame-method Wave,list-method
> ###   [,Wave-method coerce,matrix,Wave-method coerce,data.frame,Wave-method
> ###   coerce,list,Wave-method coerce,numeric,Wave-method
> ###   coerce,Wave,data.frame-method coerce,Wave,matrix-method
> ###   coerce,WaveGeneral,list-method coerce,Wave,WaveMC-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> # constructing a Wave object (1 sec.) containing sinus sound with 440Hz:
> x <- seq(0, 2*pi, length = 44100)
> channel <- round(32000 * sin(440 * x))
> Wobj <- Wave(left = channel)
Warning in .local(left, ...) :
  'samp.rate' not specified, assuming 44100Hz
Warning in .local(left, ...) : 'bit' not specified, assuming 16bit
> Wobj

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   TRUE
	Bit (8/16/24/32/64):    16 

> 
> # or more easily:
> Wobj <- sine(440)
> 
> 
> 
> cleanEx()
> nameEx("WaveMC")
> ### * WaveMC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: WaveMC
> ### Title: Constructors and coercion for class WaveMC objects
> ### Aliases: WaveMC WaveMC,ANY-method WaveMC,Wave-method
> ###   WaveMC,numeric-method WaveMC,matrix-method WaveMC,data.frame-method
> ###   WaveMC,list-method [,WaveMC-method coerce,matrix,WaveMC-method
> ###   coerce,data.frame,WaveMC-method coerce,list,WaveMC-method
> ###   coerce,numeric,WaveMC-method coerce,WaveMC,data.frame-method
> ###   coerce,WaveMC,matrix-method coerce,WaveMC,Wave-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> # constructing a WaveMC object (1 sec.) containing sinus sound with 440Hz:
> x <- seq(0, 2*pi, length = 44100)
> channel <- round(32000 * sin(440 * x))
> WMCobj <- WaveMC(data = channel)
Warning in .local(data, ...) :
  'samp.rate' not specified, assuming 44100Hz
Warning in .local(data, ...) : 'bit' not specified, assuming 16bit
> WMCobj

WaveMC Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Number of channels:     1
	PCM (integer format):   TRUE
	Bit (8/16/24/32/64):    16 

> 
> 
> 
> cleanEx()
> nameEx("Waveforms")
> ### * Waveforms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Waveforms
> ### Title: Create Wave Objects of Special Waveforms
> ### Aliases: Waveforms sine sawtooth square silence noise pulse
> ### Keywords: datagen
> 
> ### ** Examples
> 
> Wobj <- sine(440, duration = 1000)
> Wobj2 <- noise(duration = 1000)
> Wobj3 <- pulse(220, duration = 1000)
> plot(Wobj)
> plot(Wobj2)
> plot(Wobj3)
> 
> 
> 
> cleanEx()
> nameEx("audspec")
> ### * audspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: audspec
> ### Title: Frequency band conversion
> ### Aliases: audspec
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
>   aspectrum <- audspec(pspectrum, testsound@samp.rate)
> 
> 
> 
> cleanEx()
> nameEx("deltas")
> ### * deltas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deltas
> ### Title: Calculate delta features
> ### Aliases: deltas
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   m <- melfcc(testsound, frames_in_rows=FALSE)
>   d <- deltas(m)
> 
> 
> 
> cleanEx()
> nameEx("dolpc")
> ### * dolpc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dolpc
> ### Title: (Perceptive) Linear Prediction
> ### Aliases: dolpc
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
>   aspectrum <- audspec(pspectrum, testsound@samp.rate)$aspectrum
>   lpcas <- dolpc(aspectrum, 10)
> 
> 
> 
> cleanEx()
> nameEx("extractWave")
> ### * extractWave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractWave
> ### Title: Extractor for Wave and WaveMC objects
> ### Aliases: extractWave
> ### Keywords: manip utilities iplot
> 
> ### ** Examples
> 
> Wobj <- sine(440)
> # extracting the middle 0.5 seconds of that 1 sec. sound:
> Wobj2 <- extractWave(Wobj, from = 0.25, to = 0.75, xunit = "time")
> Wobj2

Wave Object
	Number of Samples:      22051
	Duration (seconds):     0.5
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> 
> ## Not run: 
> ##D # or interactively:
> ##D Wobj2 <- extractWave(Wobj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("fftfreqconvmx")
> ### * fftfreqconvmx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fftfreqconvmx
> ### Title: Internal: Convert FFT frequency bins to Bark/Mel bins
> ### Aliases: fft2barkmx fft2melmx
> ### Keywords: internal
> 
> ### ** Examples
> 
>   #Mel matrix in Slaney's mfcc.m:
>   #tuneR:::fft2melmx(512, 8000, 40, 1, 133.33, 6855.5, FALSE, FALSE)
> 
> 
> 
> cleanEx()
> nameEx("freqconv")
> ### * freqconv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freqconv
> ### Title: Frequency scale conversion
> ### Aliases: bark2hz hz2bark mel2hz hz2mel
> 
> ### ** Examples
> 
> hz2bark(440)
[1] 4.078563
> bark2hz(hz2bark(440))
[1] 440
> hz2mel(440, htk = TRUE)
[1] 549.6387
> mel2hz(hz2mel(440, htk = TRUE), htk = TRUE)
[1] 440
> hz2mel(440, htk = FALSE)
[1] 6.6
> mel2hz(hz2mel(440, htk = FALSE), htk = FALSE)
[1] 440
> 
> 
> 
> cleanEx()
> nameEx("getMidiNotes")
> ### * getMidiNotes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getMidiNotes
> ### Title: Extract note events from objects returned by readMidi
> ### Aliases: getMidiNotes
> 
> ### ** Examples
> 
> content <- readMidi(system.file("example_files", "Bass_sample.mid", package="tuneR"))
> getMidiNotes(content)
   time length track channel note notename velocity
1     0    129     2       0   45        A       78
2   360    123     2       0   48        c       81
3   480    129     2       0   50        d       79
4   600     64     2       0   52        e       68
5   840    352     2       0   45        A       82
6  1200    230     2       0   43        G       62
7  1440    135     2       0   45        A       80
8  1920     77     2       0   45        A       88
9  2280     77     2       0   48        c       77
10 2400    122     2       0   50        d       90
11 2520     97     2       0   52        e       75
12 2760    365     2       0   45        A       75
13 3120    230     2       0   48        c       77
14 3360     90     2       0   45        A       78
> 
> 
> 
> cleanEx()
> nameEx("lifter")
> ### * lifter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lifter
> ### Title: Liftering of cepstra
> ### Aliases: lifter
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   m <- melfcc(testsound, frames_in_rows=FALSE)
>   unlm <- lifter(m, inv=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("lpc2cep")
> ### * lpc2cep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lpc2cep
> ### Title: LPC to cepstra conversion
> ### Aliases: lpc2cep
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
>   aspectrum <- audspec(pspectrum, testsound@samp.rate)
>   lpcas <- dolpc(aspectrum$aspectrum, 8)
>   cepstra <- lpc2cep(lpcas)
> 
> 
> 
> cleanEx()
> nameEx("melfcc")
> ### * melfcc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: melfcc
> ### Title: MFCC Calculation
> ### Aliases: melfcc
> ### Keywords: ts
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   m1 <- melfcc(testsound)
> 
>   #Use PLP features to calculate cepstra and output the matrices like the
>   #original Matlab code (note: modelorder limits the number of cepstra)
>   m2 <- melfcc(testsound, numcep=9, usecmp=TRUE, modelorder=8, 
+     spec_out=TRUE, frames_in_rows=FALSE)
Warning in melfcc(testsound, numcep = 9, usecmp = TRUE, modelorder = 8,  :
  PLP cepstra are implicitly dcttype 1
> 
> 
> 
> cleanEx()
> nameEx("notenames")
> ### * notenames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: notenames
> ### Title: Generating note names from numbers
> ### Aliases: notenames
> ### Keywords: utilities
> 
> ### ** Examples
> 
> notenames(c(-24, -12, 0, 12)) # octaves of a
[1] "A"   "a"   "a'"  "a''"
> notenames(3:15)               # chromaticism
 [1] "c''"  "c#''" "d''"  "d#''" "e''"  "f''"  "f#''" "g''"  "g#''" "a''" 
[11] "a#''" "b''"  "c'''"
> 
> ## same in german:
> notenames(3:15, language = "german")
 [1] "c''"   "cis''" "d''"   "dis''" "e''"   "f''"   "fis''" "g''"   "gis''"
[10] "a''"   "ais''" "h''"   "c'''" 
> 
> 
> 
> cleanEx()
> nameEx("periodogram")
> ### * periodogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: periodogram-methods
> ### Title: Periodogram (Spectral Density) Estimation on Wave objects
> ### Aliases: periodogram periodogram,WaveGeneral-method
> ###   periodogram,character-method
> ### Keywords: ts
> 
> ### ** Examples
> 
> # constructing a Wave object (1 sec.) containing sinus sound with 440Hz:
> Wobj <- sine(440)
> Wobj

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> 
> # Calculate periodograms in windows of 4096 samples each - without
> #   any overlap - resulting in an Wspec object that is printed:
> Wspecobj <- periodogram(Wobj, width = 4096)
> Wspecobj
Wspec Object (use summary() for more details)

Number of Periodograms: 11 
Estimated at 2048 Frequencies: 10.7666 ... 22050 

Further parameters:
width:   4096 
overlap: 0 
normal.: TRUE 

> 
> # Plot the first periodogram from Wspecobj:
> plot(Wspecobj)
> # Plot the third one and choose a reasonable xlim:
> plot(Wspecobj, which = 3, xlim = c(0, 1000))
> # Mark frequency that has been generated before:
> abline(v = 440, col="red")
> # plot the spectrogram
> image(Wspecobj, ylim=c(0, 2000))
> 
> # same again with normalize = FALSE and with logarithmic y-axis plotted:
> Wspecobj2 <- periodogram(Wobj, width = 4096, normalize = FALSE)
> Wspecobj2
Wspec Object (use summary() for more details)

Number of Periodograms: 11 
Estimated at 2048 Frequencies: 10.7666 ... 22050 

Further parameters:
width:   4096 
overlap: 0 
normal.: FALSE 

> 
> plot(Wspecobj2, which = 3, xlim = c(0, 1000), log="y")
> abline(v = 440, col="red")
> image(Wspecobj2, ylim=c(0, 2000), log="z")
> 
> 
> FF(Wspecobj)              # all ~ 440 Hertz
 [1] 440.6120 440.5971 440.6010 440.6152 440.6085 440.5957 440.6049 440.6159
 [9] 440.6045 440.5957 439.1563
> noteFromFF(FF(Wspecobj))  # all diapason a
 [1] 0 0 0 0 0 0 0 0 0 0 0
> 
> 
> 
> cleanEx()
> nameEx("postaud")
> ### * postaud
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postaud
> ### Title: Equal loudness compression
> ### Aliases: postaud
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
>   aspectrum <- audspec(pspectrum, testsound@samp.rate)
>   paspectrum <- postaud(x = aspectrum$aspectrum, fmax = 5000, 
+     fbtype = "mel")
> 
> 
> 
> cleanEx()
> nameEx("powspec")
> ### * powspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: powspec
> ### Title: Powerspectrum
> ### Aliases: powspec
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
> 
> 
> 
> cleanEx()
> nameEx("prepComb")
> ### * prepComb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prepComb
> ### Title: Preparing the combination/concatenation of Wave or WaveMC
> ###   objects
> ### Aliases: prepComb
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> Wobj1 <- sine(440, duration = 520)
> Wobj2 <- extractWave(sine(330, duration = 500), from = 110, to = 500)
> par(mfrow = c(2,1))
> plot(bind(Wobj1, Wobj2), xunit = "samples")
> abline(v = 520, col = "red")  # here is a "click"!
> 
> # now remove the "click" by deleting a minimal amount of information:
> Wobj1 <- prepComb(Wobj1, where = "end")
> Wobj2 <- prepComb(Wobj2, where = "start")
> plot(bind(Wobj1, Wobj2), xunit = "samples")
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("readMP3")
> ### * readMP3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readMP3
> ### Title: Read an MPEG-2 layer 3 file into a Wave object
> ### Aliases: readMP3
> ### Keywords: IO file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Requires an mp3 file named sample.mp3 in the current directory.
> ##D mpt <- readMP3("sample.mp3")
> ##D summary(mpt)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readMidi")
> ### * readMidi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readMidi
> ### Title: Read a MIDI file
> ### Aliases: readMidi
> ### Keywords: IO file
> 
> ### ** Examples
> 
> content <- readMidi(system.file("example_files", "Bass_sample.mid", package="tuneR"))
> str(content)
'data.frame':	35 obs. of  8 variables:
 $ time               : num  0 0 0 0 0 0 0 129 360 480 ...
 $ event              : Factor w/ 27 levels "Note Off","Note On",..: 25 23 24 22 5 4 2 1 2 2 ...
 $ type               : chr  "58" "51" "54" "2f" ...
 $ channel            : num  NA NA NA NA 0 0 0 0 0 0 ...
 $ parameter1         : int  NA NA NA NA 33 7 45 45 48 50 ...
 $ parameter2         : int  NA NA NA NA NA 127 78 64 81 79 ...
 $ parameterMetaSystem: chr  "4/4, 24 clocks/tick, 8 1/32 notes / 24 clocks" "5e+05" "40 x 00 x 00 x 00 x 00" "" ...
 $ track              : int  1 1 1 1 2 2 2 2 2 2 ...
> content
   time          event type channel parameter1 parameter2
1     0 Time Signature   58      NA         NA         NA
2     0      Set Tempo   51      NA         NA         NA
3     0   SMPTE Offset   54      NA         NA         NA
4     0   End of Track   2f      NA         NA         NA
5     0 Program Change <NA>       0         33         NA
6     0     Controller <NA>       0          7        127
7     0        Note On <NA>       0         45         78
8   129       Note Off <NA>       0         45         64
9   360        Note On <NA>       0         48         81
10  480        Note On <NA>       0         50         79
11  483       Note Off <NA>       0         48         64
12  600        Note On <NA>       0         52         68
13  609       Note Off <NA>       0         50         64
14  664       Note Off <NA>       0         52         64
15  840        Note On <NA>       0         45         82
16 1192       Note Off <NA>       0         45         64
17 1200        Note On <NA>       0         43         62
18 1430       Note Off <NA>       0         43         64
19 1440        Note On <NA>       0         45         80
20 1575       Note Off <NA>       0         45         64
21 1920        Note On <NA>       0         45         88
22 1997       Note Off <NA>       0         45         64
23 2280        Note On <NA>       0         48         77
24 2357       Note Off <NA>       0         48         64
25 2400        Note On <NA>       0         50         90
26 2520        Note On <NA>       0         52         75
27 2522       Note Off <NA>       0         50         64
28 2617       Note Off <NA>       0         52         64
29 2760        Note On <NA>       0         45         75
30 3120        Note On <NA>       0         48         77
31 3125       Note Off <NA>       0         45         64
32 3350       Note Off <NA>       0         48         64
33 3360        Note On <NA>       0         45         78
34 3450       Note Off <NA>       0         45         64
35 3839   End of Track   2f      NA         NA         NA
                             parameterMetaSystem track
1  4/4, 24 clocks/tick, 8 1/32 notes / 24 clocks     1
2                                          5e+05     1
3                         40 x 00 x 00 x 00 x 00     1
4                                                    1
5                                           <NA>     2
6                                           <NA>     2
7                                           <NA>     2
8                                           <NA>     2
9                                           <NA>     2
10                                          <NA>     2
11                                          <NA>     2
12                                          <NA>     2
13                                          <NA>     2
14                                          <NA>     2
15                                          <NA>     2
16                                          <NA>     2
17                                          <NA>     2
18                                          <NA>     2
19                                          <NA>     2
20                                          <NA>     2
21                                          <NA>     2
22                                          <NA>     2
23                                          <NA>     2
24                                          <NA>     2
25                                          <NA>     2
26                                          <NA>     2
27                                          <NA>     2
28                                          <NA>     2
29                                          <NA>     2
30                                          <NA>     2
31                                          <NA>     2
32                                          <NA>     2
33                                          <NA>     2
34                                          <NA>     2
35                                                   2
> 
> 
> 
> cleanEx()
> nameEx("readWave")
> ### * readWave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readWave
> ### Title: Reading Wave files
> ### Aliases: readWave
> ### Keywords: IO file
> 
> ### ** Examples
> 
> Wobj <- sine(440)
> 
> tdir <- tempdir()
> tfile <- file.path(tdir, "myWave.wav")
> writeWave(Wobj, filename = tfile)
> list.files(tdir, pattern = "\\.wav$")
[1] "myWave.wav"
> newWobj <- readWave(tfile)
> newWobj

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> file.remove(tfile)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("spec2cep")
> ### * spec2cep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spec2cep
> ### Title: Spectra to Cepstra Conversion
> ### Aliases: spec2cep
> 
> ### ** Examples
> 
>   testsound <- normalize(sine(400) + sine(1000) + square(250), "16")
Warning in normalize(sine(400) + sine(1000) + square(250), "16") :
  pcm set to TRUE since unit was one of 8, 16, or 24
>   pspectrum <- powspec(testsound@left, testsound@samp.rate)
>   aspectrum <- audspec(pspectrum, testsound@samp.rate)
>   cepstra <- spec2cep(aspectrum$aspectrum)
> 
> 
> 
> cleanEx()
> nameEx("tuneR")
> ### * tuneR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tuneR
> ### Title: tuneR
> ### Aliases: tuneR tuneR-package
> ### Keywords: documentation
> 
> ### ** Examples
> 
> library("tuneR") # in a regular session, we are loading tuneR
>   
> # constructing a mono Wave object (2 sec.) containing sinus 
> # sound with 440Hz and folled by 220Hz:
> Wobj <- bind(sine(440), sine(220))
> show(Wobj)

Wave Object
	Number of Samples:      88200
	Duration (seconds):     2
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> plot(Wobj) # it does not make sense to plot the whole stuff
> plot(extractWave(Wobj, from = 1, to = 500))
> ## Not run: 
> ##D play(Wobj) # listen to the sound
> ## End(Not run)
> 
> tmpfile <- file.path(tempdir(), "testfile.wav")
> # write the Wave object into a Wave file (can be played with any player):
> writeWave(Wobj, tmpfile)
> # reading it in again:
> Wobj2 <- readWave(tmpfile)
> 
> Wobjm <- mono(Wobj, "left") # extract the left channel
> # and downsample to 11025 samples/sec.:
> Wobjm11 <- downsample(Wobjm, 11025)
> # extract a part of the signal interactively (click for left/right limits):
> ## Not run: 
> ##D Wobjm11s <- extractWave(Wobjm11)
> ## End(Not run)
> # or extract some values reproducibly 
> Wobjm11s <- extractWave(Wobjm11, from=1000, to=17000)
> 
> # calculating periodograms of sections each consisting of 1024 observations,
> # overlapping by 512 observations:
> WspecObject <- periodogram(Wobjm11s, normalize = TRUE, width = 1024, overlap = 512)
> # Let's look at the first periodogram:
> plot(WspecObject, xlim = c(0, 2000), which = 1)
> # or a spectrogram
> image(WspecObject, ylim = c(0, 1000))
> # calculate the fundamental frequency:
> ff <- FF(WspecObject)
> print(ff)
 [1] 440.5963 440.5963 440.6025 440.6108 440.6157 440.6141 440.6069 440.5989
 [9] 440.5954 440.5986 440.6065 440.7029 440.6703 440.6122 440.6041 440.5971
[17] 440.5957 440.6009 220.7692 220.0178 219.5518 219.3725 219.5021 219.4432
[25] 219.4206 219.5705 219.4835 219.5542 219.3591 219.5249
> # derive note from FF given diapason a'=440
> notes <- noteFromFF(ff, 440)
> # smooth the notes:
> snotes <- smoother(notes)
Loading required namespace: pastecs
> # outcome should be 0 for diapason "a'" and -12 (12 halftones lower) for "a"
> print(snotes) 
 [1]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 -12
[20] -12 -12 -12 -12 -12 -12 -12 -12 -12 -12 -12
> # plot melody and energy of the sound:
> melodyplot(WspecObject, snotes)
> 
> # apply some quantization (into 8 parts): 
> qnotes <- quantize(snotes, WspecObject@energy, parts = 8) 
> # an plot it, 4 parts a bar (including expected values):
> quantplot(qnotes, expected = rep(c(0, -12), each = 4), bars = 2)
> # now prepare for LilyPond
> qlily <- quantMerge(snotes, 4, 4, 2)
> qlily
  note duration punctuation  slur
1    0        1       FALSE FALSE
5    0        4       FALSE FALSE
6  -12        2        TRUE FALSE
> 
> 
> 
> cleanEx()
> nameEx("updateWave")
> ### * updateWave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateWave
> ### Title: Update old Wave objects for use with new versions of tuneR
> ### Aliases: updateWave
> 
> ### ** Examples
> 
> x <- sine(440)
> updateWave(x)

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> 
> 
> 
> cleanEx()
> nameEx("writeWave")
> ### * writeWave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeWave
> ### Title: Writing Wave files
> ### Aliases: writeWave
> ### Keywords: IO file
> 
> ### ** Examples
> 
> Wobj <- sine(440)
> 
> tdir <- tempdir()
> tfile <- file.path(tdir, "myWave.wav")
> writeWave(Wobj, filename = tfile)
> list.files(tdir, pattern = "\\.wav$")
[1] "myWave.wav"   "testfile.wav"
> newWobj <- readWave(tfile)
> newWobj

Wave Object
	Number of Samples:      44100
	Duration (seconds):     1
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   FALSE
	Bit (8/16/24/32/64):    32 

> file.remove(tfile)
[1] TRUE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.61 0.12 1.84 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
